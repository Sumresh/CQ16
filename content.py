"""content-based-recommendation-udemy-courses.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZbY4faAa3Iq2I60kx6hbrplcwsABNqMN

*Import Libraries*
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import cohere


pd.set_option('display.max_colwidth', None)




"""*Read csv file*"""

df = pd.read_csv('udemy_courses.csv')

df



df.info()



df.isnull().sum()

df.nunique()



def grab_col(dataframe, cat_th=10, car_th=20):

    cat_cols = [col for col in dataframe.columns if str(dataframe[col].dtype) in ['category', 'object', 'bool']]
    num_but_cat = [col for col in dataframe.columns if str(dataframe[col].dtype) in ['int64', 'float64'] and dataframe[col].nunique() < cat_th]
    cat_but_car = [col for col in dataframe.columns if str(dataframe[col].dtype) in ['category', 'object'] and dataframe[col].nunique() > car_th]
    cat_cols = cat_cols + num_but_cat
    cat_cols = [col for col in cat_cols if col not in cat_but_car]

    num_cols = [col for col in dataframe.columns if dataframe[col].dtype in ['float64', 'int64']]
    num_cols = [col for col in num_cols if col not in cat_cols]

    print(f'Observations: {dataframe.shape[0]}')
    print(f'Variables: {dataframe.shape[1]}')
    print(f'Categorical Variables: {len(cat_cols)}')
    print(f'Numerical Variables: {len(num_cols)}')
    print(f'Numerical But Categorical Variables: {len(num_but_cat)}')
    print(f'Categorical But Cardinal: {len(cat_but_car)}')

    return cat_cols, num_cols, cat_but_car

cat_cols, num_cols, cat_but_car = grab_col(df, cat_th=10, car_th=20)

cat_cols

num_cols

cat_but_car

num_cols.remove('course_id')

"""*Summarize the categorical variables*"""

def cat_summary(dataframe, col_name, plot=False):
    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),
                       'Ratio': round(100*(dataframe[col_name].value_counts()) / len(dataframe), 2)}))


    print('######################################################################\n')

for col in cat_cols:
    cat_summary(df, col, plot=True)

"""*Summarize the numerical variables*"""

df[num_cols].describe().T

def num_summary(dataframe, numerical_col, plot=False):
    print(numerical_col.upper())
    print(dataframe[numerical_col].describe().T)



    print('################################################################\n')

for col in num_cols:
    num_summary(df, col, plot=True)

df['num_reviews'].hist()

"""*Check the correlations between numerical variables*"""

# plt.figure(figsize=(10, 7))
# sns.heatmap(df.corr(), cmap='crest', annot=True)

"""## Content Based Recommender Systems

*We will work on course_title variable for recommendations*
"""

df['course_title'].head()

"""### Step 1: Create TF-IDF Matrix"""

tf_idf = TfidfVectorizer(stop_words='english')
tf_idf_matrix = tf_idf.fit_transform(df['course_title'])

tf_idf_matrix.shape

"""### Step 2: Create Cosine Similarity Matrix"""

cosine_sim = cosine_similarity(tf_idf_matrix)

cosine_sim

"""### Step 3: Make Recommendations Based on Similarities

*Create a pandas series consist of course titles and indexes*
"""

indices = pd.Series(df.index, index=df['course_title'])
indices.head()

indices.shape

"""*Delete duplicate course and keep last course*"""

indices = indices[~indices.index.duplicated(keep='last')]
indices.head()

indices.value_counts().value_counts()

indices.shape

"""*Make recommendations for a random course*"""

random_course = df['course_title'].sample()
random_course

similarity_scores = pd.DataFrame(cosine_sim[random_course.index.values[0]], columns=['score'])

movie_indices = similarity_scores.sort_values('score', ascending=False)

movie_indices = movie_indices[movie_indices['score'] > 0.25][1:10].index
movie_indices

df['course_title'].iloc[movie_indices]

"""*Functionalize the recommend system*"""
dff= pd.read_csv("udemy_courses.csv")
z = dff['course_title']

def search_course(keyword):
    result = z[z.str.contains(keyword, case=False)]
    if not result.empty:
        return result.iloc[0]  # Return only the first result
    else:
        return "No matching course found."

def content_based_recommender(course, cosine_sim, dataframe):

    title = search_course(course) 
    # Create indexes
    indices = pd.Series(df.index, index=df['course_title'])
    indices = indices[~indices.index.duplicated(keep='last')]

    # Catch the title of index
    course_index = indices[title]

    # Calculate the similarity score based on title
    similarity_scores = pd.DataFrame(cosine_sim[course_index], columns=['score'])

    # Recommend 5 courses
    movie_indices = similarity_scores.sort_values('score', ascending=False)
    movie_indices = movie_indices[movie_indices['score'] > 0.25][1:10].index

    return df['course_title'].iloc[movie_indices]

"""*Let's make recommendation Python courses*"""

course_name = 'Python Algo Trading: Sentiment Trading with News'

def serach(title):
    import cohere
    co = cohere.Client('D2jB7snDc0ae8cAvQ3QLxJD0kG9bQjv4vAlmZuP3')
    response = co.generate(
        prompt= f'Give me a roadmpa in points for the course regarding: {title}',
        )
    print(response)
    return response

"""*E-commerce Recommendation*"""

if __name__ == "__main__":
    serach("")